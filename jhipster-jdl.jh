//note federated entities

entity AccountDeletion {
	author String
}

entity Comment {
	author String,
    guid String,
    parent_guid String,
    text String,
    created_at LocalDate,
    author_signature String,
    parent_author_signature String,
    thread_parent_guid String
}

entity Contact {
	author String, //Diaspora ID
    recipient String, //Diaspora ID
    following Boolean,
    sharing Boolean //Aspects, AspectsMembership
}

entity Conversation {
	author String, //DiasporaID
    guid String,
    subject String, //255 ch
    created_at LocalDate, // Timestamp
    //participants String, //DiasporaID Person
    message String //Message
    //has many Participants
    //has many Messages
}

entity Event {
	author String,
    guid String,
    summary String,
    start LocalDate, //TimeStamp
    end LocalDate, //TimeStamp
    all_day Boolean,
    timezone String, //TimeZone
    description String, //Markdown
    //Location
}

entity EventParticipation {
	author String, //DiasporaID
    guid String,
    parent_guid String,
    status EventStatus,
    author_signature String,
    parent_author_signature String
}

entity Like {
	author String,
    guid String,
    parent_guid String,
    parent_type Type,
    positive Boolean,
    author_signature String,
    parent_author_signature String
}

// an ignored comment
/** not an ignored comment */
entity Location {
	address String,
	lat Float,
    lng Float
}

entity Message {
	author String,
    guid String,
    conversation_guid String,
    text String, //Markdown
    created_at LocalDate //Timestamp
}

entity Participation {
	author String,
    guid String,
    parent_guid String,
    parent_type Type
}

entity Photo {
	author String,
    guid String,
    guid Boolean,
    created_at LocalDate, // Timestamp,
    remote_photo_path String, //URL
    remote_photo_name String,
    height Integer,
    width Integer
    
    text String,
    status_message_guid String
}

entity Poll {
	guid String,
    question String
    //has_many :poll_answers
	//has_many :poll_participations
}

entity PollAnswer {
	guid String,
    answer String
}

entity PollParticipation {
	author String,
    guid String,
    parent_guid String,
    poll_answer_guid String,
    author_signature String,
    parent_author_signature String
}

entity Post {
	author String,
    guid String,
    created_at LocalDate, //TimeStamp
    pub Boolean,
    
    provider_display_name String,
	post_type PostType
}

entity Profile {
	author String,

	 first_name String,
     last_name String,
     image_url String,
     image_url_small String,
     image_url_medium String,
     birthday LocalDate,
     gender String,
     bio String,
     location String,
     searchable Boolean,
     nsfw Boolean,
	 tag_string String
}

entity Reshare {
    root_author String,
    root_guid String,
    
}

entity Retraction {
	author String,
    target_guid String,
    target_type Type //Type
}

entity StatusMessage {
    text String // MarkDown
    
}


//not federated entities
entity UserAccount {

	serializedPrivateKey String,
	gettingStarted Boolean,
	disableMail Boolean,
	language String,
	rememberCreatedAt ZonedDateTime,
	signInCount Integer,
	currentSignInAt ZonedDateTime,
	lastSignInAt ZonedDateTime,
	currentSignInIp String,
	lastSignInIp String,
	createdAt ZonedDateTime,
	updatedAt ZonedDateTime,
	lockedAt ZonedDateTime,
	showCommunitySpotlightInStream Boolean,
	autoFollowBack Boolean,
	autoFollowBackAspectId Integer,
	hiddenShareables String,
	lastSeen ZonedDateTime,
	exportE String,
	exportedAt ZonedDateTime,
	exporting Boolean,
	stripExif Boolean
	exportedPhotosFile String,
	exportedPhotosAt ZonedDateTime,
	exportingPhotos Boolean,
	colorTheme String,
	postDefaultPublic Boolean
	
}

entity Person {
	guid String,
	diasporaId String,
	serializedPublicKey String,
	createdAt ZonedDateTime,
	updatedAt ZonedDateTime,  
	closedAccount Boolean,
	fetchStatus Integer,
	podId Integer
}



enum EventStatus {
    ACCEPTED, DECLINED, TENTATIVE
}

enum Type {
    ACCOUNTDELETION, COMMENT, CONTACT, CONVERSATION, EVENT, EVENTPARTICIPATION, LIKE, LOCATION, MESSAGE, PARTICIPATION, PHOTO, POLL, POLLANSWER, POLLPARTICIPATION, POST, PROFILE, RESHARE, RETRACTION, STATUSMESSAGE
}

enum PostType {
	STATUSMESSAGE, RESHARE
}

// defining multiple oneToOne relationships
relationship OneToMany {
	Conversation{participants} to Person,
    Conversation{messages} to Message
}

relationship OneToOne {
	UserAccount{user} to User,
    UserAccount{person} to Person
}


relationship OneToOne {
    Person{profile} to Profile,
    Person{accountdeletion} to AccountDeletion
}

relationship OneToMany {
	Person{contacts} to Contact,
    Person{posts} to Post,
    Person{photos} to Photo,
    Person{comments} to Comment,
    Person{participations} to Participation,
    Person{events} to EventParticipation
}

relationship OneToMany {
	Event{events2} to EventParticipation
}
relationship OneToOne {
    StatusMessage{location} to Location,
    StatusMessage{poll} to Poll
}

relationship OneToMany {
	StatusMessage{photos} to Photo
}

relationship OneToOne {
	Post{statusMessage} to StatusMessage,
    Post{reshare} to Reshare
}

relationship OneToMany {
	Post{comments} to Comment
    //Post{reshares} to Reshare,
	//Post{resharers} to Person
}

// defining multiple OneToMany relationships with comments
relationship OneToMany {
    UserAccount{conversations} to Conversation
}

relationship OneToMany {
	Poll{pollanswers} to PollAnswer,
    Poll{pollparticipants} to PollParticipation
}

relationship OneToMany {
	PollAnswer{pollanswers1} to PollParticipation
}


// Set pagination options
paginate * with infinite-scroll
//paginate Job with pagination

//dto * with mapstruct

// Set service options to all except few
service all with serviceImpl //except Employee, Job
// Set an angular suffix
//angularSuffix * with mySuffix