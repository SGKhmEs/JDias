//note federated entities

entity AccountDeletion {
	author String
}

entity Aspect {
	name String,
    createdAt LocalDate,
    updatedAt LocalDate,
    contactVisible Boolean,
    chatEnabled Boolean,
    postDefault Boolean
}

relationship OneToMany {
	Aspect{aspectMemberships} to AspectMembership,
    Aspect{aspectVisibilities} to AspectVisiblity
}

entity AspectMembership {
    createdAt LocalDate,
    updatedAt LocalDate
}



entity AspectVisiblity {
	postType PostType
}

entity Comment {
	author String,
    guid String,
    parentGuid String,
    text String,
    createdAt LocalDate,
    authorSignature String,
    parentAuthorSignature String,
    threadParentGuid String
}

entity Contact {
	author String, //Diaspora ID
    recipient String, //Diaspora ID
    following Boolean,
    sharing Boolean //Aspects, AspectsMembership
}

relationship OneToMany {
	Contact{aspectMemberships} to AspectMembership

}

entity Conversation {
	author String, //DiasporaID
    guid String,
    subject String, //255 ch
    createdAt LocalDate, // Timestamp
    //participants String, //DiasporaID Person
    message String //Message
    //has many Participants
    //has many Messages
}

relationship OneToMany {
	Conversation{participants} to Person,
    Conversation{messages} to Message
}

entity Event {
	author String,
    guid String,
    summary String,
    start LocalDate, //TimeStamp
    end LocalDate, //TimeStamp
    allDay Boolean,
    timezone String, //TimeZone
    description String, //Markdown
    //Location
}

relationship OneToMany {
	Event{eventPatricipations} to EventParticipation
}

entity EventParticipation {
	author String, //DiasporaID
    guid String,
    parentGuid String,
    status EventStatus,
    authorSignature String,
    parentAuthorSignature String
}

entity Like {
	author String,
    guid String,
    parentGuid String,
    parentType Type,
    positive Boolean,
    authorSignature String,
    parentAuthorSignature String
}

// an ignored comment
/** not an ignored comment */
entity Location {
	address String,
	lat Float,
    lng Float
}

entity Message {
	author String,
    guid String,
    conversationGuid String,
    text String, //Markdown
    createdAt LocalDate //Timestamp
}

entity Participation {
	author String,
    guid String,
    parentGuid String,
    parentType Type
}

entity Photo {
	author String,
    guid String,
    guid Boolean,
    createdAt LocalDate, // Timestamp,
    remotePhotoPath String, //URL
    remotePhotoName String,
    height Integer,
    width Integer
    
    text String,
    statusMessageGuid String
}

entity Poll {
	guid String,
    question String
    //hasMany :pollAnswers
	//hasMany :pollParticipations
}

relationship OneToMany {
	Poll{pollanswers} to PollAnswer,
    Poll{pollparticipants} to PollParticipation
}

entity PollAnswer {
	guid String,
    answer String
}

relationship OneToMany {
	PollAnswer{pollanswers1} to PollParticipation
}



entity PollParticipation {
	author String,
    guid String,
    parentGuid String,
    pollAnswerGuid String,
    authorSignature String,
    parentAuthorSignature String
}

entity Post {
	author String,
    guid String,
    createdAt LocalDate, //TimeStamp
    pub Boolean,
    
    providerDisplayName String,
	postType PostType
}

relationship OneToOne {
	Post{statusMessage} to StatusMessage,
    Post{reshare} to Reshare
}

relationship OneToMany {
	Post{comments} to Comment,
    Post{aspectVisiblities} to AspectVisiblity,
    Post{likes} to Like,
    Post{tags} to Tag
    //Post{reshares} to Reshare,
	//Post{resharers} to Person
}

entity Profile {
	author String,

	 firstName String,
     lastName String,
     imageUrl String,
     imageUrlSmall String,
     imageUrlMedium String,
     birthday LocalDate,
     gender String,
     bio String,
     location String,
     searchable Boolean,
     nsfw Boolean,
	 tagString String
}

entity Reshare {
    rootAuthor String,
    rootGuid String,
    
}

entity Retraction {
	author String,
    targetGuid String,
    targetType Type //Type
}

entity StatusMessage {
    text String // MarkDown
    
}

relationship OneToOne {
    StatusMessage{location} to Location,
    StatusMessage{poll} to Poll
}

relationship OneToMany {
	StatusMessage{photos} to Photo
}

entity Tag {
	name String
}

relationship OneToMany {
	Tag{tagFollowings} to TagFollowing,
    Tag{taggings} to Tagging
}


entity Tagging {
	context String,
    createdAt LocalDate
}



entity TagFollowing {
	createdAt LocalDate,
    updatedAt LocalDate
}


//not federated entities
entity UserAccount {

	serializedPrivateKey String,
	gettingStarted Boolean,
	disableMail Boolean,
	language String,
	rememberCreatedAt LocalDate,
	signInCount Integer,
	currentSignInAt LocalDate,
	lastSignInAt LocalDate,
	currentSignInIp String,
	lastSignInIp String,
	createdAt LocalDate,
	updatedAt LocalDate,
	lockedAt LocalDate,
	showCommunitySpotlightInStream Boolean,
	autoFollowBack Boolean,
	autoFollowBackAspectId Integer,
	hiddenShareables String,
	lastSeen LocalDate,
	exportE String,
	exportedAt LocalDate,
	exporting Boolean,
	stripExif Boolean
	exportedPhotosFile String,
	exportedPhotosAt LocalDate,
	exportingPhotos Boolean,
	colorTheme String,
	postDefaultPublic Boolean
	
}

relationship OneToOne {
	UserAccount{user} to User,
    UserAccount{person} to Person
}

relationship OneToMany {
    UserAccount{conversations} to Conversation,
    UserAccount{aspectmemberships} to AspectMembership,
    UserAccount{tagfollowings} to TagFollowing
}

entity Person {
	guid String,
	diasporaId String,
	serializedPublicKey String,
	createdAt LocalDate,
	updatedAt LocalDate,  
	closedAccount Boolean,
	fetchStatus Integer,
	podId Integer
}

relationship OneToOne {
    Person{profile} to Profile,
    Person{accountdeletion} to AccountDeletion
}

relationship OneToMany {
	Person{contacts} to Contact,
    Person{posts} to Post,
    Person{photos} to Photo,
    Person{comments} to Comment,
    Person{participations} to Participation,
    Person{events} to EventParticipation
}



enum EventStatus {
    ACCEPTED, DECLINED, TENTATIVE
}

enum Type {
    ACCOUNTDELETION, COMMENT, CONTACT, CONVERSATION, EVENT, EVENTPARTICIPATION, LIKE, LOCATION, MESSAGE, PARTICIPATION, PHOTO, POLL, POLLANSWER, POLLPARTICIPATION, POST, PROFILE, RESHARE, RETRACTION, STATUSMESSAGE
}

enum PostType {
	STATUSMESSAGE, RESHARE
}

// defining multiple oneToOne relationships












// defining multiple OneToMany relationships with comments







// Set pagination options
paginate Post, Conversation, Message with infinite-scroll
//paginate Job with pagination

//dto Profile, Post with mapstruct

// Set service options to all except few
service * with serviceImpl //except Employee, Job
// Set an angular suffix
//angularSuffix * with mySuffix